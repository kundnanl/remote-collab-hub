generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  clerkId            String               @unique
  email              String               @unique
  name               String?
  imageUrl           String?
  onboardingComplete Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  organizations      OrganizationMember[]

  documents   Document[]   @relation("UserDocuments")
  permissions Permission[]

  createdRooms Room[]        @relation("RoomCreator")
  roomSessions RoomSession[]

  // --- Task relations ---
  tasksCreated Task[]        @relation("TaskCreator")
  tasksAssigned Task[]       @relation("TaskAssignee")

  taskComments TaskComment[]
  taskActivities TaskActivity[]
}

model Organization {
  id         String               @id @default(cuid())
  clerkOrgId String               @unique
  name       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  members    OrganizationMember[]
  Document   Document[]

  rooms      Room[]

  // --- Task-related back relations ---
  boards     Board[]
  sprints    Sprint[]
  tasks      Task[]
  taskRelations TaskRelation[]
  taskComments TaskComment[]
  taskActivities TaskActivity[]
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, organizationId], name: "user_org_unique")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   Json
  ownerId   String 
  orgId     String 
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User         @relation("UserDocuments", fields: [ownerId], references: [clerkId])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  permissions  Permission[]
}

model Permission {
  id         String         @id @default(cuid())
  userId     String 
  documentId String
  role       PermissionRole 

  document Document @relation(fields: [documentId], references: [id])
  user     User     @relation(fields: [userId], references: [clerkId])

  @@unique([userId, documentId])
}

enum RoomKind {
  HUDDLE
  MEETING
  FOCUS
  TEAM
  CUSTOM
}

model Room {
  id           String    @id @default(cuid())
  orgId        String
  name         String
  kind         RoomKind  @default(HUDDLE)
  isPersistent Boolean   @default(true)
  capacity     Int?
  createdBy    String    // User.clerkId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  creator      User         @relation("RoomCreator", fields: [createdBy], references: [clerkId])
  sessions     RoomSession[]

  @@index([orgId])
  @@unique([orgId, name], name: "org_room_name_unique")
}

model RoomSession {
  id        String   @id @default(cuid())
  roomId    String
  startedBy String   // User.clerkId
  startedAt DateTime @default(now())
  endedAt   DateTime?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [startedBy], references: [clerkId])

  @@index([roomId, startedAt])
}

enum PermissionRole {
  VIEWER
  EDITOR
  OWNER
}

// ===== Enums =====
enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  BLOCKED
  DONE
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SprintStatus {
  PLANNED   
  ACTIVE    
  CLOSED  
}

enum TaskType {
  FEATURE
  BUG
  CHORE
  DOCS
}

enum TaskRelationType {
  SUBTASK
  DEPENDS_ON
  BLOCKS
  DUPLICATE_OF
  RELATES_TO
}

enum TaskActivityType {
  CREATED
  UPDATED
  STATUS_CHANGED
  ASSIGNEE_CHANGED
  COMMENT_ADDED
  RELATION_ADDED
  RELATION_REMOVED
  MOVED
}

model Sprint {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  goal      String? // optional sprint goal/description
  startDate DateTime?
  endDate   DateTime?
  status    SprintStatus @default(PLANNED)
  velocityTarget Int?

  // relations
  org   Organization @relation(fields: [orgId], references: [clerkOrgId])
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===== Kanban Board =====
model Board {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  columns     BoardColumn[]

  @@unique([orgId, name])
}

model BoardColumn {
  id        String     @id @default(cuid())
  boardId   String
  title     String
  status    TaskStatus
  wipLimit  Int?
  position  Int        @default(0)

  board Board @relation(fields: [boardId], references: [id])
  tasks Task[]

  @@index([boardId, position])
  @@unique([boardId, status])
}

// ===== Tasks =====
model Task {
  id          String       @id @default(cuid())
  orgId       String
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  type        TaskType     @default(FEATURE)
  position    Int          @default(0)  // ordering within a column
  createdBy   String                     // User.clerkId
  assigneeId  String?
  sprintId    String?
  columnId    String?                    // NEW: BoardColumn reference
  dueDate     DateTime?
  startDate   DateTime?
  estimate    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  organization Organization @relation(fields: [orgId], references: [clerkOrgId])

  creator   User   @relation("TaskCreator", fields: [createdBy], references: [clerkId])
  assignee  User?  @relation("TaskAssignee", fields: [assigneeId], references: [clerkId])
  sprint    Sprint? @relation(fields: [sprintId], references: [id])
  column    BoardColumn? @relation(fields: [columnId], references: [id])

  comments      TaskComment[]
  activities    TaskActivity[]
  outgoingRelations TaskRelation[] @relation("TaskOutgoing")
  incomingRelations TaskRelation[] @relation("TaskIncoming")

  @@index([orgId, columnId])
  @@index([orgId, sprintId])
  @@index([assigneeId])
}

model TaskRelation {
  id    String            @id @default(cuid())
  orgId String
  fromId String
  toId   String
  type  TaskRelationType

  from Task @relation("TaskOutgoing", fields: [fromId], references: [id])
  to   Task @relation("TaskIncoming", fields: [toId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])

  @@unique([fromId, toId, type])
  @@index([orgId, type])
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  orgId     String
  body      String
  createdBy String
  createdAt DateTime @default(now())

  task         Task         @relation(fields: [taskId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  author       User         @relation(fields: [createdBy], references: [clerkId])

  @@index([taskId, createdAt])
  @@index([orgId])
}

model TaskActivity {
  id        String            @id @default(cuid())
  taskId    String
  orgId     String
  actorId   String
  type      TaskActivityType
  meta      Json?
  createdAt DateTime          @default(now())

  task         Task         @relation(fields: [taskId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  actor        User         @relation(fields: [actorId], references: [clerkId])

  @@index([taskId, createdAt])
  @@index([orgId, type])
}
