generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  clerkId            String   @unique
  email              String   @unique
  name               String?
  imageUrl           String?
  onboardingComplete Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  organizations OrganizationMember[]

  documents   Document[]   @relation("UserDocuments")
  permissions Permission[]

  createdRooms Room[]        @relation("RoomCreator")

  // --- Task relations ---
  tasksCreated  Task[] @relation("TaskCreator")
  tasksAssigned Task[] @relation("TaskAssignee")

  taskComments   TaskComment[]
  taskActivities TaskActivity[]
}

model Organization {
  id         String   @id @default(cuid())
  clerkOrgId String   @unique
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members  OrganizationMember[]
  Document Document[]

  rooms Room[]

  // --- Task-related back relations ---
  boards         Board[]
  sprints        Sprint[]
  tasks          Task[]
  taskRelations  TaskRelation[]
  taskComments   TaskComment[]
  taskActivities TaskActivity[]

  // --- Report-related back relations ---
  reportTemplates   ReportTemplate[]
  reportRuns        ReportRun[]
  reportDeliveries  ReportDelivery[] @relation("OrganizationReportDeliveries")
  scheduledReports  ScheduledReport[]
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, organizationId], name: "userId_organizationId")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   Json
  ownerId   String
  orgId     String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User         @relation("UserDocuments", fields: [ownerId], references: [clerkId])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  permissions  Permission[]
}

model Permission {
  id         String         @id @default(cuid())
  userId     String
  documentId String
  role       PermissionRole

  document Document @relation(fields: [documentId], references: [id])
  user     User     @relation(fields: [userId], references: [clerkId])

  @@unique([userId, documentId])
}

enum RoomKind {
  HUDDLE
  MEETING
  FOCUS
  TEAM
  CUSTOM
}

model Room {
  id           String       @id @default(cuid())
  orgId        String
  name         String
  kind         RoomKind     @default(HUDDLE)
  isPersistent Boolean      @default(true)
  capacity     Int?
  createdBy    String // User.clerkId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  rtcProvider  RTCProvider  @default(DAILY)
  rtcRoomName  String?
  rtcRoomUrl   String?

  recordings   Recording[]
  whiteboards  Whiteboard[]

  organization Organization  @relation(fields: [orgId], references: [clerkOrgId])
  creator      User          @relation("RoomCreator", fields: [createdBy], references: [clerkId])

  @@unique([orgId, name], name: "org_room_name_unique")
  @@index([orgId])
}

model Recording {
  id          String      @id @default(cuid())
  roomId      String
  provider    RTCProvider
  kind        String
  status      String
  playbackUrl String?
  sizeBytes   Int?
  durationSec Int?
  startedAt   DateTime    @default(now())
  endedAt     DateTime?
  Room        Room        @relation(fields: [roomId], references: [id])

  @@index([roomId])
}

model Whiteboard {
  id         String   @id @default(cuid())
  roomId     String
  provider   String   @default("liveblocks")
  storageKey String
  title      String   @default("Board")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Room       Room     @relation(fields: [roomId], references: [id])

  @@index([roomId])
}

enum RTCProvider {
  DAILY
}

enum PermissionRole {
  VIEWER
  EDITOR
  OWNER
}

// ===== Enums =====
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  BLOCKED
  DONE
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SprintStatus {
  PLANNED
  ACTIVE
  CLOSED
}

enum TaskType {
  FEATURE
  BUG
  CHORE
  DOCS
}

enum TaskRelationType {
  SUBTASK
  DEPENDS_ON
  BLOCKS
  DUPLICATE_OF
  RELATES_TO
}

enum TaskActivityType {
  CREATED
  UPDATED
  STATUS_CHANGED
  ASSIGNEE_CHANGED
  COMMENT_ADDED
  RELATION_ADDED
  RELATION_REMOVED
  MOVED
}

model Sprint {
  id             String       @id @default(cuid())
  orgId          String
  name           String
  goal           String?
  startDate      DateTime?
  endDate        DateTime?
  status         SprintStatus @default(PLANNED)
  velocityTarget Int?

  org   Organization @relation(fields: [orgId], references: [clerkOrgId])
  tasks Task[]

  // --- Report back relation ---
  reportRuns ReportRun[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===== Kanban Board =====
model Board {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization  @relation(fields: [orgId], references: [clerkOrgId])
  columns      BoardColumn[]

  @@unique([orgId, name])
}

model BoardColumn {
  id       String     @id @default(cuid())
  boardId  String
  title    String
  status   TaskStatus
  wipLimit Int?
  position Int        @default(0)

  board Board  @relation(fields: [boardId], references: [id])
  tasks Task[]

  @@unique([boardId, status])
  @@index([boardId, position])
}

// ===== Tasks =====
model Task {
  id          String       @id @default(cuid())
  orgId       String
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  type        TaskType     @default(FEATURE)
  position    Int          @default(0)
  createdBy   String
  assigneeId  String?
  sprintId    String?
  columnId    String?
  dueDate     DateTime?
  startDate   DateTime?
  estimate    Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  organization Organization @relation(fields: [orgId], references: [clerkOrgId])

  creator  User         @relation("TaskCreator", fields: [createdBy], references: [clerkId])
  assignee User?        @relation("TaskAssignee", fields: [assigneeId], references: [clerkId])
  sprint   Sprint?      @relation(fields: [sprintId], references: [id])
  column   BoardColumn? @relation(fields: [columnId], references: [id])

  comments          TaskComment[]
  activities        TaskActivity[]
  outgoingRelations TaskRelation[] @relation("TaskOutgoing")
  incomingRelations TaskRelation[] @relation("TaskIncoming")

  @@index([orgId, columnId])
  @@index([orgId, sprintId])
  @@index([assigneeId])
}

model TaskRelation {
  id     String           @id @default(cuid())
  orgId  String
  fromId String
  toId   String
  type   TaskRelationType

  from         Task         @relation("TaskOutgoing", fields: [fromId], references: [id])
  to           Task         @relation("TaskIncoming", fields: [toId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])

  @@unique([fromId, toId, type])
  @@index([orgId, type])
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  orgId     String
  body      String
  createdBy String
  createdAt DateTime @default(now())

  task         Task         @relation(fields: [taskId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  author       User         @relation(fields: [createdBy], references: [clerkId])

  @@index([taskId, createdAt])
  @@index([orgId])
}

model TaskActivity {
  id        String           @id @default(cuid())
  taskId    String
  orgId     String
  actorId   String
  type      TaskActivityType
  meta      Json?
  createdAt DateTime         @default(now())

  task         Task         @relation(fields: [taskId], references: [id])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  actor        User         @relation(fields: [actorId], references: [clerkId])

  @@index([taskId, createdAt])
  @@index([orgId, type])
}

// ===== Reporting Enums =====
enum ReportFormat {
  HTML
  PDF
}

enum ReportRunStatus {
  QUEUED
  GENERATING
  READY
  FAILED
}

enum ReportTemplateKind {
  SPRINT_SUMMARY
  // future: WEEKLY_ORG, MEMBER_SUMMARY, etc
}

enum DeliveryChannel {
  EMAIL
  SLACK
}

// ===== Reporting Models =====
model ReportTemplate {
  id          String             @id @default(cuid())
  orgId       String
  name        String
  kind        ReportTemplateKind
  description String?
  format      ReportFormat       @default(HTML)
  config      Json               @default("{}")
  active      Boolean            @default(true)

  organization Organization      @relation(fields: [orgId], references: [clerkOrgId])
  runs        ReportRun[]
  schedules   ScheduledReport[]

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([orgId, kind])
}

model ReportRun {
  id            String           @id @default(cuid())
  orgId         String
  templateId    String
  sprintId      String?
  status        ReportRunStatus  @default(QUEUED)
  format        ReportFormat     @default(HTML)
  data          Json             @default("{}")
  html          String?
  pdfUrl        String?
  error         String?
  createdAt     DateTime         @default(now())
  startedAt     DateTime?
  finishedAt    DateTime?

  template      ReportTemplate   @relation(fields: [templateId], references: [id])
  organization  Organization     @relation(fields: [orgId], references: [clerkOrgId])
  sprint        Sprint?          @relation(fields: [sprintId], references: [id])
  deliveries    ReportDelivery[]

  @@index([orgId, templateId, createdAt])
  @@index([sprintId])
}

model ReportDelivery {
  id        String          @id @default(cuid())
  runId     String
  orgId     String
  channel   DeliveryChannel
  target    String
  status    String          @default("PENDING")
  error     String?
  sentAt    DateTime?

  // relations
  run           ReportRun       @relation(fields: [runId], references: [id])
  organization  Organization    @relation("OrganizationReportDeliveries", fields: [orgId], references: [clerkOrgId])

  @@index([runId, channel])
  @@index([orgId])
}

model ScheduledReport {
  id          String             @id @default(cuid())
  orgId       String
  templateId  String
  timezone    String             @default("UTC")
  cron        String
  active      Boolean            @default(true)
  channels    Json               @default("[]")
  lastRunAt   DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  organization Organization      @relation(fields: [orgId], references: [clerkOrgId])
  template     ReportTemplate    @relation(fields: [templateId], references: [id])

  @@index([orgId, templateId, active])
}
