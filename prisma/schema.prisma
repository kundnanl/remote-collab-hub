generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  clerkId            String               @unique
  email              String               @unique
  name               String?
  imageUrl           String?
  onboardingComplete Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  organizations      OrganizationMember[]

  documents   Document[]   @relation("UserDocuments")
  permissions Permission[]

  createdRooms Room[]        @relation("RoomCreator")
  roomSessions RoomSession[]
}

model Organization {
  id         String               @id @default(cuid())
  clerkOrgId String               @unique
  name       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  members    OrganizationMember[]
  Document   Document[]

  rooms      Room[]
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, organizationId], name: "user_org_unique")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   Json
  ownerId   String 
  orgId     String 
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User         @relation("UserDocuments", fields: [ownerId], references: [clerkId])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  permissions  Permission[]
}

model Permission {
  id         String         @id @default(cuid())
  userId     String 
  documentId String
  role       PermissionRole 

  document Document @relation(fields: [documentId], references: [id])
  user     User     @relation(fields: [userId], references: [clerkId])

  @@unique([userId, documentId])
}

enum RoomKind {
  HUDDLE
  MEETING
  FOCUS
  TEAM
  CUSTOM
}

model Room {
  id           String    @id @default(cuid())
  orgId        String
  name         String
  kind         RoomKind  @default(HUDDLE)
  isPersistent Boolean   @default(true)
  capacity     Int?
  createdBy    String    // User.clerkId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  creator      User         @relation("RoomCreator", fields: [createdBy], references: [clerkId])
  sessions     RoomSession[]

  @@index([orgId])
  @@unique([orgId, name], name: "org_room_name_unique")
}

model RoomSession {
  id        String   @id @default(cuid())
  roomId    String
  startedBy String   // User.clerkId
  startedAt DateTime @default(now())
  endedAt   DateTime?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [startedBy], references: [clerkId])

  @@index([roomId, startedAt])
}

enum PermissionRole {
  VIEWER
  EDITOR
  OWNER
}
