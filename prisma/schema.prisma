generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  clerkId            String               @unique
  email              String               @unique
  name               String?
  imageUrl           String?
  onboardingComplete Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizations      OrganizationMember[]

  documents   Document[]   @relation("UserDocuments")
  permissions Permission[]
  roomMemberships RoomMember[]
}

model Organization {
  id         String               @id @default(cuid())
  clerkOrgId String               @unique
  name       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  
  members    OrganizationMember[]
  Document   Document[]
  virtualOffice VirtualOffice?
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, organizationId], name: "user_org_unique")
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   Json
  ownerId   String 
  orgId     String 
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner       User     @relation("UserDocuments", fields: [ownerId], references: [clerkId])
  organization Organization @relation(fields: [orgId], references: [clerkOrgId])
  permissions Permission[]
}

model Permission {
  id         String         @id @default(cuid())
  userId     String 
  documentId String
  role       PermissionRole 

  document Document @relation(fields: [documentId], references: [id])
  user     User     @relation(fields: [userId], references: [clerkId])

  @@unique([userId, documentId])
}

model VirtualOffice {
  id             String    @id @default(cuid())
  organizationId String    @unique
  organization   Organization @relation(fields: [organizationId], references: [id])

  rooms    Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id             String    @id @default(cuid())
  name           String
  description    String?
  officeId       String
  virtualOffice  VirtualOffice @relation(fields: [officeId], references: [id])

  members   RoomMember[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomMember {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  status    PresenceStatus @default(ONLINE)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId], name: "user_in_room_unique")
}

enum PresenceStatus {
  ONLINE
  OFFLINE
  IDLE
  IN_MEETING
}


enum PermissionRole {
  VIEWER
  EDITOR
  OWNER
}
